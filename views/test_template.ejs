<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Page  - Quizard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <style>
      /* ===== Core Layout & Container Styles ===== */
body {
    font-family: 'Inter', system-ui, -apple-system, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f6f6f6;
    line-height: 1.5;
}

#quiz {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 12px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

/* ===== Header Controls ===== */
.header-controls {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    gap: 12px;
    margin-bottom: 16px;
}

#question-palette-button {
    display: flex;
    align-items: center;
    gap: 8px;
    background-color: #f8f9fa;
    color: #1976d2;
    border: 1px solid #e0e0e0;
    padding: 10px 16px;
    border-radius: 8px;
    font-weight: 500;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

#question-palette-button:hover {
    background-color: #e3f2fd;
    border-color: #1976d2;
    transform: translateY(-1px);
}

#question-palette-button:active {
    transform: translateY(1px);
}

#flag-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    background-color: #f8f9fa;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 18px;
    color: #757575;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

#flag-icon:hover {
    background-color: #fff3e0;
    border-color: #ffa000;
    color: #ffa000;
    transform: translateY(-1px);
}

#flag-icon.marked {
    background-color: #fff3e0;
    border-color: #ffa000;
    color: #ffa000;
}

/* ===== Question Info Bar ===== */
.question-info-bar {
    display: flex;
    align-items: center;
    background: linear-gradient(to right, #f8f9fa, #ffffff);
    border: 1px solid #e0e0e0;
    border-radius: 10px;
    padding: 12px 20px;
    margin-bottom: 24px;
    gap: 24px;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: thin;
    scrollbar-color: #90a4ae #eceff1;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.question-info-bar::-webkit-scrollbar {
    height: 6px;
}

.question-info-bar::-webkit-scrollbar-track {
    background: #eceff1;
    border-radius: 3px;
}

.question-info-bar::-webkit-scrollbar-thumb {
    background: #90a4ae;
    border-radius: 3px;
}

.question-info-bar::-webkit-scrollbar-thumb:hover {
    background: #78909c;
}

.question-number {
    font-weight: 600;
    color: #1a237e;
    padding: 6px 16px;
    background-color: #e8eaf6;
    border-radius: 8px;
    min-width: 120px;
    text-align: center;
    flex-shrink: 0;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}

.section-info {
    color: #424242;
    font-weight: 500;
    padding: 6px 16px;
    background-color: #f5f5f5;
    border-radius: 8px;
    min-width: 140px;
    text-align: center;
    flex-shrink: 0;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}

.marks-box {
    display: flex;
    gap: 16px;
    padding: 6px 16px;
    background-color: #fafafa;
    border-radius: 8px;
    flex-shrink: 0;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}

.correct-marks {
    color: #2e7d32;
    font-weight: 600;
    padding: 4px 12px;
    background-color: #e8f5e9;
    border-radius: 6px;
    white-space: nowrap;
}

.wrong-marks {
    color: #c62828;
    font-weight: 600;
    padding: 4px 12px;
    background-color: #ffebee;
    border-radius: 6px;
    white-space: nowrap;
}

.question-type {
    color: #1976d2;
    font-weight: 600;
    padding: 6px 16px;
    background-color: #e3f2fd;
    border-radius: 8px;
    text-align: center;
    min-width: 100px;
    flex-shrink: 0;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}

/* ===== Question Content ===== */
.question {
    background-color: #ffffff;
    padding: 24px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    margin-bottom: 24px;
}

/* ===== Options Styling ===== */
.options {
    margin-top: 20px;
}

.option-container {
    margin-bottom: 12px;
}

.options input[type="radio"] {
    display: none;
}

.options label {
    display: block;
    padding: 12px 16px;
    background-color: #f8f9fa;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 15px;
}

.options input[type="radio"]:checked + label {
    background-color: #e3f2fd;
    border-color: #1976d2;
    color: #1976d2;
}

.options label:hover {
    background-color: #f5f5f5;
    transform: translateY(-1px);
}

/* ===== Question Palette Styles ===== */
.question-palette {
    position: fixed;
    top: 50%;
    right: 20px;
    transform: translateY(-50%);
    width: 300px;
    background-color: #ffffff;
    padding: 24px;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    transition: transform 0.3s ease-in-out;
    overflow-y: auto;
    max-height: 80vh;
}

.question-palette.hidden {
    transform: translateY(-50%) translateX(calc(100% + 20px));
}

.question-palette::-webkit-scrollbar {
    width: 6px;
}

.question-palette::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
}

.question-palette::-webkit-scrollbar-thumb {
    background: #90a4ae;
    border-radius: 3px;
}

.question-palette::-webkit-scrollbar-thumb:hover {
    background: #78909c;
}

.palette-item {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    margin: 4px;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.2s ease;
    background-color: #ffffff;
}

.palette-item:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.palette-item.current {
    background-color: #2196f3;
    border-color: #1976d2;
    color: #ffffff;
}

.palette-item.visited {
    background-color: #9575cd;
    border-color: #7e57c2;
    color: #ffffff;
}

.palette-item.skipped {
    background-color: #90a4ae;
    border-color: #78909c;
    color: #ffffff;
}

.palette-item.marked-for-review {
    background-color: #ffd54f;
    border-color: #ffc107;
    color: #000000;
}

.palette-item.answered {
    background-color: #66bb6a;
    border-color: #4caf50;
    color: #ffffff;
}

.palette-item.section {
    width: calc(100% - 8px);
    height: auto;
    padding: 8px;
    background-color: #f5f5f5;
    border: none;
    border-radius: 8px;
    text-align: left;
    font-weight: 600;
    color: #424242;
    margin: 8px 4px;
}

/* ===== Button Styles ===== */
.button-container {
    display: flex;
    gap: 12px;
    margin-top: 24px;
    justify-content: center;
    flex-wrap: wrap;
}

.button-container button {
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 120px;
}

#prev-btn {
    background-color: #f5f5f5;
    color: #424242;
}

#submit-btn,.togleqboxbtn {
    background-color: #4caf50;
    color: #ffffff;
}

#skip-btn {
    background-color: #ff9800;
    color: #ffffff;
}

.button-container button:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.button-container button:active {
    transform: translateY(1px);
}


/* ===== Quiz Control Buttons ===== */
#start-btn,
#submit-btn,
#printResultBtn ,
.togleqboxbtn{
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 160px;
}

/* Start Button */
#start-btn {
    background-color: #2196f3;
    color: #ffffff;
    box-shadow: 0 2px 4px rgba(33, 150, 243, 0.2);
}

#start-btn:hover {
    background-color: #1976d2;
    transform: translateY(-1px);
    box-shadow: 0 4px 6px rgba(33, 150, 243, 0.3);
}

#start-btn:active {
    transform: translateY(1px);
}

/* Submit Button */
#submit-btn {
    background-color: #4caf50;
    color: #ffffff;
    box-shadow: 0 2px 4px rgba(76, 175, 80, 0.2);
}

#submit-btn:hover {
    background-color: #388e3c;
    transform: translateY(-1px);
    box-shadow: 0 4px 6px rgba(76, 175, 80, 0.3);
}

#submit-btn:active {
    transform: translateY(1px);
}

/* Print Result Button */
#printResultBtn {
    background-color: #9c27b0;
    color: #ffffff;
    box-shadow: 0 2px 4px rgba(156, 39, 176, 0.2);
}

#printResultBtn:hover {
    background-color: #7b1fa2;
    transform: translateY(-1px);
    box-shadow: 0 4px 6px rgba(156, 39, 176, 0.3);
}

#printResultBtn:active {
    transform: translateY(1px);
}

/* Disabled State for all buttons */
#start-btn:disabled,
#submit-btn:disabled,
#printResultBtn:disabled {
    background-color: #e0e0e0;
    color: #9e9e9e;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

/* Button Container */
.quiz-controls {
    display: flex;
    gap: 16px;
    justify-content: center;
    margin: 24px 0;
    flex-wrap: wrap;
}

/* Responsive Styles */
@media (max-width: 768px) {
    #start-btn,
    #submit-btn,
    #printResultBtn {
        padding: 10px 20px;
        font-size: 15px;
        min-width: 140px;
    }

    .quiz-controls {
        gap: 12px;
    }
}

@media (max-width: 480px) {
    #start-btn,
    #submit-btn,
    #printResultBtn {
        padding: 8px 16px;
        font-size: 14px;
        min-width: 120px;
        width: 100%;
    }

    .quiz-controls {
        flex-direction: column;
        gap: 10px;
    }
}
/* ===== Loading and Overlay Styles ===== */
#loading {
    position: fixed;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    background: rgba(255, 255, 255, 0.95);
    padding: 24px;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    z-index: 1001;
    text-align: center;
    display: none;
}

.spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    margin: 12px auto;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

#overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    z-index: 1000;
    display: none;
}

/* ===== Result Styles ===== */
#result {
    background-color: #ffffff;
    padding: 24px;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    margin-top: 24px;
    text-align: center;
    overflow-y: auto;
}

#result table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
    border: 2px solid #ffd700;
    
}

#result th,
#result td {
    padding: 12px;
    text-align: center;
    border: 1px solid #ffd700;
}

#result th {
    background-color: #fff8e1;
    color: #424242;
    font-weight: 600;
}

.result-image {
    max-width: 200px;
    height: auto;
    border-radius: 8px;
    cursor: pointer;
    transition: transform 0.2s ease;
}

.result-image:hover {
    transform: scale(1.05);
}

/* ===== Popup and Overlay Styles ===== */
.popup {
    display: none;
    position: fixed;
    z-index: 1001;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
}

.popup-content {
    position: relative;
    background-color: #ffffff;
    margin: 5% auto;
    padding: 24px;
    border: none;
    width: 90%;
    max-width: 600px;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    animation: popupFade 0.3s ease-in-out;
}

@keyframes popupFade {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.popup-close {
    position: absolute;
    right: 16px;
    top: 16px;
    font-size: 24px;
    color: #666;
    cursor: pointer;
    transition: color 0.2s ease;
}

.popup-close:hover {
    color: #333;
}

/* ===== Submit Button Styles ===== */
#submit-test {
    background-color: #dc3545;
    color: #ffffff;
    padding: 12px 28px;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(220, 53, 69, 0.2);
}

#submit-test:hover {
    background-color: #c82333;
    transform: translateY(-1px);
    box-shadow: 0 4px 6px rgba(220, 53, 69, 0.3);
}

#submit-test:active {
    transform: translateY(1px);
}

/* ===== Instructions Styles ===== */
.instructions {
    background-color: #fff;
    border-radius: 12px;
    padding: 24px;
    margin-bottom: 24px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.instructions h2 {
    color: #1976d2;
    font-size: 24px;
    margin-bottom: 16px;
    text-align: center;
}

.instructions-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.instructions-list li {
    padding: 12px 0;
    border-bottom: 1px solid #e0e0e0;
    display: flex;
    align-items: center;
    gap: 12px;
}

.instructions-list li:last-child {
    border-bottom: none;
}

.instructions-list li::before {
    content: "•";
    color: #1976d2;
    font-weight: bold;
    font-size: 20px;
}

.instruction-highlight {
    background-color: #e3f2fd;
    color: #1976d2;
    padding: 4px 8px;
    border-radius: 4px;
    font-weight: 500;
}

.instructions-footer {
    margin-top: 20px;
    padding-top: 16px;
    border-top: 2px solid #e0e0e0;
    text-align: center;
    color: #666;
    font-style: italic;
}

/* ===== Overlay Styles ===== */
#overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    z-index: 1000;
}

/* ===== Responsive Styles ===== */
@media (max-width: 768px) {
    .header-controls {
        gap: 8px;
        margin-bottom: 12px;
    }

    #question-palette-button {
        padding: 8px 12px;
        font-size: 13px;
    }

    #flag-icon {
        width: 36px;
        height: 36px;
        font-size: 16px;
    }

    .question-info-bar {
        padding: 8px 16px;
        gap: 16px;
    }

    .question-number,
    .section-info,
    .marks-box,
    .question-type {
        font-size: 13px;
        padding: 4px 10px;
    }

    .correct-marks,
    .wrong-marks {
        padding: 3px 8px;
    }

    

    .palette-item {
        width: 36px;
        height: 36px;
        font-size: 14px;
    }

    .button-container button {
        padding: 10px 20px;
        min-width: 100px;
        font-size: 14px;
    }

    #result table {
        font-size: 14px;
    }

    .popup-content {
        margin: 10% auto;
        padding: 20px;
        width: 95%;
    }

    .instructions h2 {
        font-size: 20px;
    }

    .instructions-list li {
        font-size: 14px;
        padding: 10px 0;
    }

    #submit-test {
        padding: 10px 24px;
        font-size: 15px;
    }
}

@media (max-width: 480px) {
    body {
        padding: 12px;
    }

    #quiz {
        padding: 16px;
    }

    .header-controls {
        gap: 6px;
        margin-bottom: 10px;
    }

    #question-palette-button {
        padding: 6px 10px;
        font-size: 12px;
    }

    #flag-icon {
        width: 32px;
        height: 32px;
        font-size: 14px;
    }

    .question-info-bar {
        padding: 6px 12px;
        gap: 12px;
    }

    .question-number,
    .section-info,
    .marks-box,
    .question-type {
        font-size: 12px;
        padding: 3px 8px;
        min-width: auto;
    }

    .marks-box {
        gap: 8px;
    }

    .correct-marks,
    .wrong-marks {
        padding: 2px 6px;
    }

    .question {
        padding: 16px;
    }

    .options label {
        padding: 10px 12px;
        font-size: 14px;
    }

    

    .button-container {
        flex-direction: column;
    }

    .button-container button {
        width: 100%;
        padding: 12px;
    }

    #result table {
        font-size: 12px;
    }

    .result-image {
        max-width: 150px;
    }

    .popup-content {
        margin: 15% auto;
        padding: 16px;
    }

    .popup-close {
        font-size: 20px;
        right: 12px;
        top: 12px;
    }

    .instructions h2 {
        font-size: 18px;
    }

    .instructions-list li {
        font-size: 13px;
        padding: 8px 0;
    }

    #submit-test {
        padding: 8px 20px;
        font-size: 14px;
    }
}


/* Calculator Popup Styles */
.calculator-popup {
    display: none;
    position: fixed;
    background: white;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
    z-index: 1100;
    width: 400px;
    height: 600px;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    overflow: hidden;
    resize: both;
}

.calculator-popup.active {
    display: block;
}

.calculator-header {
    background: #f8f9fa;
    padding: 12px 16px;
    cursor: move;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #e0e0e0;
    user-select: none;
}

.calculator-title {
    font-weight: 600;
    color: #1976d2;
}

.close-calculator {
    background: none;
    border: none;
    color: #666;
    cursor: pointer;
    padding: 4px;
    font-size: 20px;
    line-height: 1;
    transition: color 0.2s ease;
}

.close-calculator:hover {
    color: #dc3545;
}

.calculator-frame {
    width: 100%;
    height: calc(100% - 48px);
    border: none;
}

/* Calculator Button */
#calculator-button {
    display: flex;
    align-items: center;
    gap: 8px;
    background-color: #f8f9fa;
    color: #1976d2;
    border: 1px solid #e0e0e0;
    padding: 10px 16px;
    border-radius: 8px;
    font-weight: 500;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

#calculator-button:hover {
    background-color: #e3f2fd;
    border-color: #1976d2;
    transform: translateY(-1px);
}

/* Calculator Overlay */
/* .calculator-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1099;
    backdrop-filter: blur(4px);
}

.calculator-overlay.active {
    display: block;
} */

/* Responsive Calculator */
@media (max-width: 768px) {
    .calculator-popup {
        width: 90%;
        height: 80vh;
        max-height: 600px;
        resize: none;
    }
}

@media (max-width: 480px) {
    .calculator-popup {
        width: 100%;
        height: 100%;
        border-radius: 0;
    }
    
    .calculator-header {
        padding: 16px;
    }
    
    #calculator-button {
        padding: 8px 12px;
        font-size: 13px;
    }
}

/* Add this to your existing header controls styles */
.header-controls {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 16px;
    flex-wrap: wrap;
}


/* ===== Question Image Styles ===== */
.question img {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 16px auto;
    border-radius: 7px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: all 0.3s ease;
}

/* Enhanced box shadow on hover */
.question img:hover {
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
    transform: translateY(-2px);
}

/* Responsive image container */
.question-image-container {
    position: relative;
    width: 100%;
    margin: 16px 0;
    overflow: hidden;
    border-radius: 12px;
}


.options input[type="checkbox"] {
    display: none;
}

.options input[type="checkbox"] + label {
    display: block;
    padding: 12px 16px;
    background-color: #f8f9fa;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 15px;
    margin-bottom: 8px;
}

.options input[type="checkbox"]:checked + label {
    background-color: #e3f2fd;
    border-color: #1976d2;
    color: #1976d2;
}

.options input[type="checkbox"] + label:hover {
    background-color: #f5f5f5;
    transform: translateY(-1px);
}
/* Responsive breakpoints for images */
@media (max-width: 768px) {
    .question img {
        max-height: 400px;
        object-fit: contain;
    }
}

@media (max-width: 480px) {
    .question img {
        max-height: 300px;
        margin: 12px auto;
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.12);
    }
    
    .question img:hover {
        transform: none;
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.12);
    }
}

/* Question container enhancements */
.question {
    background-color: #ffffff;
    padding: 24px;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    margin-bottom: 24px;
    transition: box-shadow 0.3s ease;
}

.question:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
}

/* Ensure text content is also responsive */
.question-content {
    font-size: 16px;
    line-height: 1.6;
    color: #333;
}

@media (max-width: 480px) {
    .question {
        padding: 16px;
    }
    
    .question-content {
        font-size: 15px;
    }
}
/* ===== Animation Keyframes ===== */
@keyframes slideIn {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}
    </style>
</head>
<body>
        
  <div id="quiz">
    <center>   
      <div id ="instruction">
        <h3 style="color:red;"> Some Instructions</h3>
        <li>Question marked for review will be in Yellow</li>
        <li>If Enable time is Selected You have 3 Hrs only</li>
        <li>Accuracy is ratio of Right  & Wrong Questions</li>
        <li>At end of test in results you can Click image to make it bigger</li>
        <li>Must use bigger Sreen </li>
      <button id="start-btn" onclick="startQuiz()">Start Quiz</button><br>
      <div class="timer-input">
        <label for="timer-minutes">Set Timer (minutes): </label>
        <input type="number" id="timer-minutes" min="1" max="180" value="180">
      </div>
    </div> 
    </center>
    <div id="timer" style="font-size: 20px; font-weight: bold;"></div>
    <div id="question-container" style="display: none;">
    </div>
    <br>
    <center><form id="quizForm" method="POST" action="/submit-quiz">  
          <input type="hidden" name="questions" id="questionsInput">   
             <button id="submit-btn" style="display: none;" type="submit">Submit TesT</button> 
               </form></center>
    
    <div id="optt" style="display: none;">

   

    
    </div>
    <div class="question-palette" id="questionPalette" style="display: none;">
    </div>
    </div>
  
    <div id="result" style="display: none;"></div>
      <div class="qdiv" id="qpbox" style="display: none;">
     
        <div id="overlay"></div>
        <div id="loading">
            <div class="spinner"></div>
            Generating result...
        </div>
  </body>
  
  <script type = "text/javascript">  
      window.onload = function () {  
          document.onkeydown = function (e) {  
              return (e.which || e.keyCode) != 116;  
          };  
      }  
    
    
   window.onbeforeunload = confirmExit;
  
      function confirmExit() {
          return "ARE YOU SURE TO EXIT QUIZ ??? <BR> YOUR ANSWERS WILL NOT BE SAVED !!! ";
      }

    </script> 
  
  <script>
    // Add this script at the end of your HTML file
document.addEventListener('DOMContentLoaded', function() {
    // Create calculator elements
    const calculatorHTML = `
        <!-- <div class="calculator-overlay"></div> -->
        <div class="calculator-popup">
            <div class="calculator-header">
                <div class="calculator-title">Scientific Calculator</div>
                <button class="close-calculator">&times;</button>
            </div>
            <iframe class="calculator-frame" src="https://www.tcsion.com/OnlineAssessment/ScientificCalculator/Calculator.html"></iframe>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', calculatorHTML);

    // Get elements
    const calculatorPopup = document.querySelector('.calculator-popup');
    const calculatorHeader = document.querySelector('.calculator-header');
    const closeButton = document.querySelector('.close-calculator');
    //const overlay = document.querySelector('.calculator-overlay');

    // Dragging functionality
    let isDragging = false;
    let currentX;
    let currentY;
    let initialX;
    let initialY;
    let xOffset = 0;
    let yOffset = 0;

    function dragStart(e) {
        if (e.type === "touchstart") {
            initialX = e.touches[0].clientX - xOffset;
            initialY = e.touches[0].clientY - yOffset;
        } else {
            initialX = e.clientX - xOffset;
            initialY = e.clientY - yOffset;
        }

        if (e.target === calculatorHeader) {
            isDragging = true;
        }
    }

    function dragEnd() {
        initialX = currentX;
        initialY = currentY;
        isDragging = false;
    }

    function drag(e) {
        if (isDragging) {
            e.preventDefault();

            if (e.type === "touchmove") {
                currentX = e.touches[0].clientX - initialX;
                currentY = e.touches[0].clientY - initialY;
            } else {
                currentX = e.clientX - initialX;
                currentY = e.clientY - initialY;
            }

            xOffset = currentX;
            yOffset = currentY;

            setTranslate(currentX, currentY, calculatorPopup);
        }
    }

    function setTranslate(xPos, yPos, el) {
        el.style.transform = `translate(${xPos}px, ${yPos}px)`;
    }

    // Event listeners for dragging
    calculatorHeader.addEventListener('touchstart', dragStart, false);
    calculatorHeader.addEventListener('touchend', dragEnd, false);
    calculatorHeader.addEventListener('touchmove', drag, false);
    calculatorHeader.addEventListener('mousedown', dragStart, false);
    document.addEventListener('mousemove', drag, false);
    document.addEventListener('mouseup', dragEnd, false);

    // Toggle calculator
    window.toggleCalculator = function() {
        calculatorPopup.classList.add('active');
        overlay.classList.add('active');
    };

    // Close calculator
    closeButton.addEventListener('click', function() {
        calculatorPopup.classList.remove('active');
        overlay.classList.remove('active');
    });

    overlay.addEventListener('click', function() {
        calculatorPopup.classList.remove('active');
        overlay.classList.remove('active');
    });
});
 
     let questions = <%- questions %>;
    
      var currentQuestion = 0;
      var startTime;
      let timer;
      let timeLimit = 10800; // 3 hours in seconds
      //let timeLimit = 10; // 3 hours in seconds
      let timerEnabled = true;
      let i=0;
       
  // quiz codes !     
  function startQuiz() {
       
    var qppbox = document.getElementById("qpbox");
      qppbox.style.display = "block";
      
    var startBtn = document.getElementById("start-btn");
      startBtn.style.display = "none";

    var instructiondiv = document.getElementById("instruction");
    instructiondiv.style.display = "none";  
    var submit_test_btn = document.getElementById('submit-btn');
    submit_test_btn.style.display = 'block';
  
    var questionContainer = document.getElementById("question-container");
      questionContainer.style.display = "block";
  
      
    var opt = document.getElementById("optt");
      opt.style.display = "inline-block";
  
      startTime = new Date();
      displayQuestion();
        // if (timerEnabled) {
        //   startTimer();
        // }

        var timerMinutes = parseInt(document.getElementById("timer-minutes").value);
    if (timerMinutes > 0) {
        timerEnabled = true;
        timeLimit = timerMinutes * 60;
        startTimer();
    } else {
        timerEnabled = false;
    }
     
    }
          
  function skipQuestion() {
  var question = questions[currentQuestion];
  question.skipped = true;
  question.visited = false;
  question.userAnswer = null;
  question.timeTaken = getTimeTakenInSeconds();
  
  if (currentQuestion < questions.length) {
    currentQuestion++;
    displayQuestion();
    
  } else {
    alert("This was the last Question of the Test");
  }  
}   

// function displayQuestion() {
//     var questionContainer = document.getElementById("question-container");
//     var question = questions[currentQuestion];

//     // Mark the current question as visited
//     question.visited = true;
//     console.log("Question " + (currentQuestion + 1) + " marked as visited.");

//     var html = '<div class="question">';
    
//     // New header controls container
//     html += '<div class="header-controls">';
//     html += '<button id="question-palette-button" onclick="toggleQuestionPalette()">';
//     html += '<i class="fas fa-th"></i> Show Index</button>';
//     html += '<i id="flag-icon" class="fas fa-flag' + (question.markedForReview ? ' marked' : '') + '" onclick="toggleReviewFlag()"></i>';
//     html += '</div>';
    
//     // Question info bar
//     html += '<div class="question-info-bar">';
//     html += '<span class="question-number">Question ' + (currentQuestion + 1) + '</span>';
//     html += '<span class="section-info">' + question.section + '</span>';
//     html += '<div class="marks-box">';
//     html += '<span class="correct-marks">+' + question.marks.correct + '</span>';
//     html += '<span class="wrong-marks">-' + question.marks.wrong + '</span>';
//     html += '</div>';
//     html += '<span class="question-type">' + question.type.toUpperCase() + '</span>';
//     html += '</div>';
    
//     html += "<br>" + question.question + "</div>";

//     if (question.type === "mcq") {
//         html += '<div class="options">';
//         for (var i = 0; i < question.options.length; i++) {
//             html += '<div class="option-container">';
//             html += '<input type="radio" id="option_' + i + '" name="option" value="' + i + '"';
            
//             if (question.userAnswer !== null && question.userAnswer === i) {
//                 html += ' checked';
//             }
            
//             html += '>';
//             html += '<label for="option_' + i + '">' + question.options[i] + '</label>';
//             html += '</div>';
//         }
//         html += '</div>';
//     } else if (question.type === "integer") {
//         html += "<p class='integer-input'>WRITE IN BOX: <input placeholder='Write here...' class='inpt' type='number' id='integer-answer' step='1' value='" + (question.userAnswer !== null ? question.userAnswer : "") + "'/></p><br>";
//     }

//     html += '<div class="button-container">';
//     if (currentQuestion > 0) {
//         html += "<button id='prev-btn' onclick='goToPreviousQuestion()'>Previous</button>";
//     }
   
//     html += "<button id='submit-btn' onclick='submitQuiz()'>Save & Next</button>";
//     html += "<button id='skip-btn' onclick='skipQuestion()'>Skip</button>";
//     html += '</div>';

//     questionContainer.innerHTML = html;
//     updateQuestionPalette();
//     updateFlagIcon();
// }



// function displayQuestion() {
//     var questionContainer = document.getElementById("question-container");
//     var question = questions[currentQuestion];

//     // Mark the current question as visited
//     question.visited = true;
//     console.log("Question " + (currentQuestion + 1) + " marked as visited.");

//     var html = '<div class="question">';
    
//     // New header controls container
//     html += '<div class="header-controls">';
//     html += '<button id="question-palette-button" onclick="toggleQuestionPalette()">';
//     html += '<i class="fas fa-th"></i> Show Index</button>';
//    // html += '<button id="calculator-button" onclick="toggleCalculator()">';
//     html += '<i class="fas fa-calculator"></i> Calculator</button>';
//     html += '<i id="flag-icon" class="fas fa-flag' + (question.markedForReview ? ' marked' : '') + '" onclick="toggleReviewFlag()"></i>';
//     html += '</div>';
    
//     // Question info bar
//     html += '<div class="question-info-bar">';
//     html += '<span class="question-number">Question ' + (currentQuestion + 1) + '</span>';
//     html += '<span class="section-info">' + question.section + '</span>';
//     html += '<div class="marks-box">';
//     html += '<span class="correct-marks">+' + question.marks.correct + '</span>';
//     html += '<span class="wrong-marks">-' + question.marks.wrong + '</span>';
//     html += '</div>';
//     html += '<span class="question-type">' + question.type.toUpperCase() + '</span>';
//     html += '</div>';
    
//     html += "<br>" + question.question + "</div>";

//     if (question.type === "mcq") {
//         html += '<div class="options">';
//         for (var i = 0; i < question.options.length; i++) {
//             html += '<div class="option-container">';
//             html += '<input type="radio" id="option_' + i + '" name="option" value="' + i + '"';
            
//             if (question.userAnswer !== null && question.userAnswer === i) {
//                 html += ' checked';
//             }
            
//             html += '>';
//             html += '<label for="option_' + i + '">' + question.options[i] + '</label>';
//             html += '</div>';
//         }
//         html += '</div>';
//     } else if (question.type === "integer") {
//         html += "<p class='integer-input'>WRITE IN BOX: <input placeholder='Write here...' class='inpt' type='number' id='integer-answer' step='1' value='" + (question.userAnswer !== null ? question.userAnswer : "") + "'/></p><br>";
//     }

//     html += '<div class="button-container">';
//     if (currentQuestion > 0) {
//         html += "<button id='prev-btn' onclick='goToPreviousQuestion()'>Previous</button>";
//     }
   
//     html += "<button id='submit-btn' onclick='submitQuiz()'>Save & Next</button>";
//     html += "<button id='skip-btn' onclick='skipQuestion()'>Skip</button>";
//     html += '</div>';

//     questionContainer.innerHTML = html;
//     updateQuestionPalette();
//     updateFlagIcon();
// }



function displayQuestion() {
    var questionContainer = document.getElementById("question-container");
    var question = questions[currentQuestion];

    // Mark the current question as visited
    question.visited = true;
    console.log("Question " + (currentQuestion + 1) + " marked as visited.");

    var html = '<div class="question">';
    
    // Header controls (unchanged)
    html += '<div class="header-controls">';
    html += '<button id="question-palette-button" onclick="toggleQuestionPalette()">';
    html += '<i class="fas fa-th"></i> Show Index</button>';
    html += '<i id="flag-icon" class="fas fa-flag' + (question.markedForReview ? ' marked' : '') + '" onclick="toggleReviewFlag()"></i>';
    html += '</div>';
    
    // Question info bar (unchanged)
    html += '<div class="question-info-bar">';
    html += '<span class="question-number">Question ' + (currentQuestion + 1) + '</span>';
    html += '<span class="section-info">' + question.section + '</span>';
    html += '<div class="marks-box">';
    html += '<span class="correct-marks">+' + question.marks.correct + '</span>';
    html += '<span class="wrong-marks">-' + question.marks.wrong + '</span>';
    html += '</div>';
    html += '<span class="question-type">' + question.type.toUpperCase() + '</span>';
    html += '</div>';
    
    html += "<br>" + question.question + "</div>";

    if (question.type === "mcq") {
        html += '<div class="options">';
        for (var i = 0; i < question.options.length; i++) {
            html += '<div class="option-container">';
            html += '<input type="radio" id="option_' + i + '" name="option" value="' + i + '"';
            
            if (question.userAnswer !== null && question.userAnswer === i) {
                html += ' checked';
            }
            
            html += '>';
            html += '<label for="option_' + i + '">' + question.options[i] + '</label>';
            html += '</div>';
        }
        html += '</div>';
    } else if (question.type === "multi") {
        html += '<div class="options">';
        for (var i = 0; i < question.options.length; i++) {
            html += '<div class="option-container">';
            html += '<input type="checkbox" id="option_' + i + '" name="option" value="' + i + '"';
            
            // Check if this option was previously selected
            if (question.userAnswer && question.userAnswer.includes(i)) {
                html += ' checked';
            }
            
            html += '>';
            html += '<label for="option_' + i + '">' + question.options[i] + '</label>';
            html += '</div>';
        }
        html += '</div>';
    } else if (question.type === "integer") {
        html += "<p class='integer-input'>WRITE IN BOX: <input placeholder='Write here...' class='inpt' type='number' id='integer-answer' step='1' value='" + (question.userAnswer !== null ? question.userAnswer : "") + "'/></p><br>";
    }

    html += '<div class="button-container">';
    if (currentQuestion > 0) {
        html += "<button id='prev-btn' onclick='goToPreviousQuestion()'>Previous</button>";
    }
   
    html += "<button id='submit-btn' onclick='submitQuiz()'>Save & Next</button>";
    html += "<button id='skip-btn' onclick='skipQuestion()'>Skip</button>";
    html += '</div>';

    questionContainer.innerHTML = html;
    updateQuestionPalette();
    updateFlagIcon();
}

function toggleReviewFlag() {
  var question = questions[currentQuestion];
  question.markedForReview = !question.markedForReview;
  updateFlagIcon();
  updateQuestionPalette();
}
  
  function updateFlagIcon() {
      var flagIcon = document.getElementById('flag-icon');
      if (questions[currentQuestion].markedForReview) {
          flagIcon.style.color = '#ffd700';
      } else {
          flagIcon.style.color = 'gray';
      }
  }
      
  // function updateFlagIcon() {
  //     var flagIcon = document.getElementById('flag-icon');
  //     if (questions[currentQuestion].markedForReview) {
  //         flagIcon.style.color = 'yellow';
  //     } else {
  //         flagIcon.style.color = 'gray';
  //     }
  // }
  function submitQuiz() {
    var question = questions[currentQuestion];
    
    question.skipped = false; // Remove skipped status when answering

    if (question.type === "mcq") {
        var selectedOption = document.querySelector('input[name="option"]:checked');

        if (!selectedOption) {
            alert("Please select an option.");
            return;
        }

        var selectedValue = parseInt(selectedOption.value);
        question.userAnswer = selectedValue;
    } else if (question.type === "multi") {
        var selectedOptions = document.querySelectorAll('input[name="option"]:checked');

        if (selectedOptions.length === 0) {
            alert("Please select at least one option.");
            return;
        }

        var selectedValues = Array.from(selectedOptions).map(option => parseInt(option.value));
        question.userAnswer = selectedValues;
    } else if (question.type === "integer") {
        var integerAnswerInput = document.getElementById("integer-answer");
        var integerAnswer = integerAnswerInput.value;

        if (!integerAnswer) {
            alert("Please enter a valid integer.");
            return;
        }

        question.userAnswer = integerAnswer;
    }

    if (currentQuestion < questions.length - 1) {
        currentQuestion++;
        displayQuestion();
    } else {
        submitTest();
    }        
}    
  
  function submit() {
      clearInterval(timer);
      
      var markedQuestions = questions.filter(q => q.markedForReview).map(q => questions.indexOf(q) + 1);
      var markedMessage = markedQuestions.length > 0 
          ? "Questions marked for review: " + markedQuestions.join(", ")
          : "No questions marked for review.";
      
      var userResponse = confirm("Are you sure you want to submit the test?\n\n" + markedMessage);
      
      if (userResponse) {
          showResult();
      } else {
          alert("You can continue with your test");
          if (timerEnabled) {
              startTimer();
          }
      }
  }

  function goToPreviousQuestion() {
        currentQuestion--;
        if (currentQuestion >= 0) {
          displayQuestion();
        }
      }
  
  
  // question pallet
  // Updated JavaScript code for question palette highlighting

//   function updateQuestionPalette() {
//   var questionPalette = document.getElementById("questionPalette");
//   questionPalette.innerHTML = "<button class='togleqboxbtn' onclick='toggleQuestionPalette()'><b>Close Index </b></button>";

//   questions.forEach(function (question, index) {
//     var sectionName = question.section;

//     if (index === 0 || question.section !== questions[index - 1].section) {
//       var sectionText = document.createElement("p");
//       sectionText.className = "palette-item section";
//       sectionText.textContent = sectionName;
//       questionPalette.appendChild(sectionText);
//     }

//     var questionButton = document.createElement("button");
//     questionButton.className = "palette-item";
//     questionButton.textContent = index + 1;

//     // Apply color based on question state
//     if (index === currentQuestion) {
//       questionButton.classList.add("current");
//     } else if (!question.visited) {
//       // No color change for unvisited questions
//     } else if (question.markedForReview) {
//       questionButton.classList.add("marked-for-review");
//     } else if (question.userAnswer !== null) {
//       questionButton.classList.add("answered");
//     } else if (question.visited){
//       questionButton.classList.add("visited");
//     }  else if (question.skipped) {
//       questionButton.classList.add("skipped");
//     } 
//     // Ensure "marked-for-review" class overrides others
//     if (question.userAnswer !==null) {
//       questionButton.classList.remove( "skipped", "visited");
//       questionButton.classList.add("answered");
//     }
    

//     questionButton.addEventListener("click", function () {
//       goToQuestion(index);
//     });

//     questionPalette.appendChild(questionButton);
//   });
// }

function updateQuestionPalette() {
  var questionPalette = document.getElementById("questionPalette");
  questionPalette.innerHTML = "<button class='togleqboxbtn' onclick='toggleQuestionPalette()'><b>Close Index </b></button>";

  // Create a section container to hold all sections
  var sectionContainer = document.createElement("div");
  sectionContainer.className = "section-container";

  // Group questions by sections using the new section_name property
  const sectionMap = new Map();
  
  questions.forEach((question, index) => {
    const sectionName = question.section_name || question.section; // Fallback to old property if needed
    if (!sectionMap.has(sectionName)) {
      sectionMap.set(sectionName, []);
    }
    sectionMap.get(sectionName).push({ ...question, globalIndex: index });
  });

  // Create sections and their questions
  sectionMap.forEach((sectionQuestions, sectionName) => {
    // Create section header
    var sectionHeader = document.createElement("div");
    sectionHeader.className = "section-header";
    
    var sectionText = document.createElement("p");
    sectionText.className = "palette-item section";
    sectionText.textContent = sectionName;
    sectionHeader.appendChild(sectionText);

    // Add section info if available
    const sectionInfo = questions.sections?.find(s => s.name === sectionName);
    if (sectionInfo) {
      var sectionCount = document.createElement("span");
      sectionCount.className = "section-count";
      sectionCount.textContent = `(${sectionInfo.question_count} Questions)`;
      sectionText.appendChild(sectionCount);
    }

    sectionContainer.appendChild(sectionHeader);

    // Create question buttons for this section
    var questionButtons = document.createElement("div");
    questionButtons.className = "question-buttons";

    sectionQuestions.forEach((question) => {
      var questionButton = document.createElement("button");
      questionButton.className = "palette-item";
      questionButton.textContent = question.globalIndex + 1;

      // Apply color based on question state
      if (question.globalIndex === currentQuestion) {
        questionButton.classList.add("current");
      } else if (!question.visited) {
        // No color change for unvisited questions
      } else if (question.markedForReview) {
        questionButton.classList.add("marked-for-review");
      } else if (question.userAnswer !== null) {
        questionButton.classList.add("answered");
      } else if (question.visited) {
        questionButton.classList.add("visited");
      } else if (question.skipped) {
        questionButton.classList.add("skipped");
      }

      // Ensure "marked-for-review" class overrides others
      if (question.userAnswer !== null) {
        questionButton.classList.remove("skipped", "visited");
        questionButton.classList.add("answered");
      }

      questionButton.addEventListener("click", function() {
        goToQuestion(question.globalIndex);
      });

      questionButtons.appendChild(questionButton);
    });

    sectionContainer.appendChild(questionButtons);
  });

  questionPalette.appendChild(sectionContainer);
}


  
  function toggleQuestionPalette() {
    var questionPalette = document.getElementById("questionPalette");
    var questionPaletteButton = document.getElementById("question-palette-button");
  
    if (questionPalette.style.display === "none") {
      questionPalette.style.display = "block";
      questionPalette.classList.remove("hidden");
      questionPaletteButton.textContent = "Hide Index";
    } else {
      questionPalette.style.display = "none";
      questionPalette.classList.add("hidden");
      questionPaletteButton.textContent = "Show Index";
  
      // Restart the animation by removing and re-adding the "hidden" class
      questionPalette.offsetWidth; // Trigger a reflow to restart the animation
      questionPalette.classList.remove("hidden");
      setTimeout(() => {
        questionPalette.classList.add("hidden");
      }, 10); // Add a small delay before adding the "hidden" class back
    }
  }
  
  function goToQuestion(questionIndex) {
    for (let i = currentQuestion + 1; i < questions.length; i++) {
        questions[i].skipped = true;
    }
    currentQuestion = questionIndex;
    displayQuestion();
  }
  
    // timer codes 
  
  function toggleTimer() {
            timerEnabled = document.getElementById("timer-checkbox").checked;
            if (!timerEnabled) {
              clearInterval(timer);
              document.getElementById("timer").textContent = "";
            }
          }
      
  function getTimeTakenInSeconds() {
            var currentTime = new Date();
            var timeDiff = currentTime - startTime;
            var seconds = Math.floor(timeDiff / 1000);
            return seconds;
          }
          
  
  function startTimer() {
            timer = setInterval(function() {
              if (timeLimit <= 0) {
                clearInterval(timer);
                alert("Time's up! The quiz will be submitted automatically.");
                submit();
              } else {
                timeLimit--;
                updateTimerDisplay();
              }
            }, 1000);
          }
          
  function formatTime(seconds) {
            var hours = Math.floor(seconds / 3600);
            var minutes = Math.floor((seconds % 3600) / 60);
            var secs = seconds % 60;
            return (hours < 10 ? "0" : "") + hours + ":" + (minutes < 10 ? "0" : "") + minutes + ":" + (secs < 10 ? "0" : "") + secs;
          }
      
  function updateTimerDisplay() {
            const timerElement = document.getElementById("timer");
            if (timeLimit <= 300 && timeLimit > 60) { // less than 5 minutes
              timerElement.classList.add("red");
            } else if (timeLimit <= 60) { // less than 1 minute
              timerElement.classList.add("blinking");
            } else {
              timerElement.classList.remove("red", "blinking");
            }
            timerElement.textContent = formatTime(timeLimit);
          }
     
  function showLoading() {
          document.getElementById("overlay").style.display = "block";
          document.getElementById("loading").style.display = "block";
      }
  
      function hideLoading() {
          document.getElementById("overlay").style.display = "none";
          document.getElementById("loading").style.display = "none";
      }
  
  </script>
  <script>
  document.getElementById('quizForm').onsubmit = function(event) {
    clearInterval(timer);
    event.preventDefault();
    showpop()
    function showpop(){
    var markedQuestions = questions.filter(q => q.markedForReview).map(q => questions.indexOf(q) + 1);
    var markedMessage = markedQuestions.length > 0 
        ? "Questions marked for review: " + markedQuestions.join(", ")
        : "No questions marked for review.";
    
    // Create and show custom popup
    var popup = document.createElement('div');
    popup.style.cssText = 'position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:white;padding:20px;border:1px solid black;z-index:1000;';
    popup.innerHTML = `
        <p>Are you sure you want to submit the test?</p>
        <p>${markedMessage}</p>
        <button id="confirmSubmit">Confirm</button>
        <button id="cancelSubmit">Cancel</button>
    `;
    document.body.appendChild(popup);

    // Handle confirm button click
    document.getElementById('confirmSubmit').onclick = function() {
        document.body.removeChild(popup);
        proceedWithSubmission();
    };

    // Handle cancel button click
    document.getElementById('cancelSubmit').onclick = function() {
        document.body.removeChild(popup);
        alert("You can continue with your test");
        if (timerEnabled) {
            startTimer();
        }
    };
};
}

function proceedWithSubmission() {
    showResult();
    showLoading();
}

// function showResult(){

//   let is_dpp = <%- is_dpp %>;
//   const type = '<%- type %>';
//   const batch_name = '<%- batch_name %>';
//   var batch_id = '<%- batch_id %>';
//   var test_id = '<%- test_id %>';
//   var test_name = '<%- test_name %>';
  
//   if (is_dpp) {
//     var urlParts = window.location.pathname.split('/');
//     var subject_slug = urlParts[3]
//     var data = {
//         batch_id: batch_id,
//         test_id: test_id,
//         subject_slug: subject_slug,
//         questions: questions ,
//         test_name:test_name,
//         batch_name : batch_name,
//         type : type
//     };
//   }
//   else {
//     var data = {
//     batch_id: batch_id,
//     test_id: test_id,
//     test_name: test_name,
//     batch_name : batch_name,
//     questions: questions  ,
//     type : type
//   } ;
// }
//    fetch('<%- submit_url %>', {
//     method: 'POST',
//     headers: {
//         'Content-Type': 'application/json'
//     },
//     body: JSON.stringify(data)
// }).then(response => response.json())
//     .then(result => {
//        displayResult(result.result , result.message);
//     })
//     .catch(error => {
//         console.error('Error:', error);
//     });

// }
function showResult() {
  let is_dpp = <%- is_dpp %>;
  const type = '<%- type %>';
  const batch_name = '<%- batch_name %>';
  var batch_id = '<%- batch_id %>';
  var test_id = '<%- test_id %>';
  var test_name = '<%- test_name %>';

  let data = {
    batch_id: batch_id,
    test_id: test_id,
    test_name: test_name,
    batch_name: batch_name,
    questions: questions,
    type: type
  };

  if (is_dpp) {
    var urlParts = window.location.pathname.split('/');
    var subject_slug = urlParts[3];

    fetch(`/get-subject-name/${batch_name}/${batch_id}/${subject_slug}`)
      .then(response => response.json())
      .then(subjectData => {
        if (!subjectData.success) {
          throw new Error('Failed to fetch subject name');
        }

        data.subject_slug = subject_slug;
        data.subject_name = subjectData.subject_name;

        return submitTestfinal(data);
      })
      .catch(error => {
        console.error('Error:', error);
      });
  } else {
    submitTestfinal(data);
  }
}

let analys;

// Function to submit test data and handle response
async function submitTestfinal(data) {
  try {
    const response = await fetch('<%- submit_url %>', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }

    const result = await response.json();
    analys = { "overallReport": result.overallReport };

    displayResult(result.result, result.message); // Display result here

    // After setting analys, call submitTestWithRedirect
    // submitTestWithRedirect(analys);
  } catch (error) {
    console.error('Submission error:', error);
  }
}


function submitTestWithRedirect(data) {
  try {
    // Ensure data is a JSON string
    const jsonString = JSON.stringify(data);

    // Encode the JSON string as Base64
    const base64Data = btoa(jsonString);

    // URL encode the Base64 string
    const urlSafeData = encodeURIComponent(base64Data);

    // Redirect to stats page
    window.open(`/stats?data=${urlSafeData}`, '_blank');

  } catch (error) {
    console.error("Error encoding or redirecting:", error);
    alert("Something went wrong while processing your results. Please try again.");
  }
}



function printResult() {
    var printWindow = window.open('', '_blank');
    
    var printContent = '<html><head><title>Quiz Results</title>';
    printContent += '<style>';
    printContent += 'body { font-family: Arial, sans-serif; line-height: 1.6; background-color: #f0f0f0; }';
    printContent += '.section { margin-bottom: 30px; background-color: #fff; border: 1px solid #ddd; border-radius: 5px; padding: 15px; }';
    printContent += 'h2 { color: #333; text-align: center; }';
    printContent += '.question, .answer { margin-bottom: 15px; padding: 10px; background-color: #fff; border: 1px solid #ddd; border-radius: 5px; }';
    printContent += 'img { max-width: 100%; height: auto; display: block; margin: 10px 0; }';
    printContent += '.question-number { font-weight: bold; margin-bottom: 5px; }';
    printContent += '.correct-answer { margin-top: 5px; color: green; }';
    printContent += '.user-response { margin-top: 5px; }';
    printContent += '.user-response.correct { color: orange; }';
    printContent += '.user-response.wrong { color: red; }';
    printContent += '</style>';
    printContent += '</head><body>';
    
    var resultDiv = document.getElementById('result');
    var sections = resultDiv.querySelectorAll('#headings');
    
    // Questions and Answers combined section
    printContent += '<div class="section"><h2>All Questions with Correct Answers and Your Responses</h2>';
    var questionCounter = 1;
    sections.forEach(function(section) {
        var nextTable = section.nextElementSibling;
        if (nextTable && nextTable.tagName === 'TABLE') {
            var questions = nextTable.querySelectorAll('tr:not(:first-child):not(:last-child)');
            questions.forEach(function(question) {
                var questionImage = question.querySelector('img');
                var answerCell = question.querySelector('td:nth-child(3)');
                var correctAnswer = answerCell.querySelector('div[style*="color: green"]');
                var userResponse = answerCell.querySelector('div[style*="color: orange"], div[style*="color: red"]');
                
                printContent += '<div class="question">';
                printContent += '<div class="question-number">Question ' + questionCounter + '</div>';
                if (questionImage) {
                    printContent += questionImage.outerHTML;
                }
                if (correctAnswer) {
                    printContent += '<div class="correct-answer">Correct Answer: ' + correctAnswer.innerHTML + '</div>';
                }
                if (userResponse) {
                    var isCorrect = userResponse.style.color === "orange";
                    var responseClass = isCorrect ? "correct" : "wrong";
                    printContent += '<div class="user-response ' + responseClass + '">Your Response: ' + userResponse.innerHTML + '</div>';
                }
                printContent += '</div>';
                questionCounter++;
            });
        }
    });
    printContent += '</div>';
    var overallResultContainer = document.querySelector(".overall-result-container");
    printContent +='<div>'+overallResultContainer.innerHTML+'</div>'
    
    printContent += '</body></html>';
    
    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.print();
}

function displayResult(result , message) {
      var resultContainer = document.getElementById('result');


    // Decode the Base64 string
    const decodedHtml = atob(result);

    // Insert the decoded HTML into the result container
    hideLoading();
    resultContainer.innerHTML = decodedHtml;
    resultContainer.innerHTML += '<button id="printResultBtn" onclick="submitTestWithRedirect(analys)">Get Test Statistics Visualization</button>';
    resultContainer.innerHTML += '<button id="printResultBtn" onclick="printResult()">Print Result</button>';
    resultContainer.innerHTML += '<br><div>'+message+'</div>';
      

      // Add styling
      var overallResultContainer = document.querySelector(".overall-result-container");
      overallResultContainer.style.backgroundColor = "#f2f2f2";
      overallResultContainer.style.padding = "20px";
      overallResultContainer.style.borderRadius = "10px";
      overallResultContainer.style.boxShadow = "0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)";
  
      var overallResultBox = document.querySelector(".overall-result-box");
      overallResultBox.style.backgroundColor = "#fff";
      overallResultBox.style.padding = "20px";
      overallResultBox.style.borderRadius = "10px";
      overallResultBox.style.boxShadow = "0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)";
  
      var accuracyScore = document.querySelector(".accuracy-score");
      accuracyScore.style.fontWeight = "bold";
      accuracyScore.style.fontSize = "1.2em";
  
      var feedbackMessage = document.querySelector(".feedback-message");
      feedbackMessage.style.fontWeight = "bold";
      feedbackMessage.style.fontSize = "1.1em";
  
      // Style the result images
      var resultImages = document.querySelectorAll('.result-image');
      resultImages.forEach(function(img) {
          img.style.maxWidth = '200px';
          img.style.maxHeight = '200px';
          img.style.objectFit = 'contain';
          img.style.cursor = 'pointer';
      });
  
      // Hide other elements
      // Hide other elements
    document.getElementById("optt").style.display = "none";
    document.getElementById("question-palette-button").style.display = "none";
    document.getElementById("quiz").style.display = "none";
    resultContainer.style.display = "block";
    links();
}


function links(){
  const videoSolutionLinks = document.querySelectorAll('.video-solution-link');
  videoSolutionLinks.forEach(link => {
    link.addEventListener('click', (event) => {
      const videoLink = event.target.getAttribute('data-link');
      if (videoLink === '#') {
        event.preventDefault(); // Prevent default action of the link
        alert('No solution added.');
      } else if (videoLink.includes('youtube')) {
        // Open YouTube links directly
        window.open(videoLink, '_blank');
      }else {
        // Open the video solution link in a new tab or perform your desired action
        window.open(`https://player-fqv0.onrender.com/?l=${videoLink}`, '_blank');
      }
    });
  });
}

    function openModal(src) {
        var modal = document.getElementById("myModal");
        var modalImg = document.getElementById("img01");
        modal.style.display = "block";
        modalImg.src = src;
    }

    function closeModal() {
        document.getElementById("myModal").style.display = "none";
    }
</script>

<div id="myModal" class="modal">
    <span class="close" onclick="closeModal()">&times;</span>
    <img class="modal-content" id="img01">
</div>

<style>
 .modal {
    display: none;
    position: fixed;
    z-index: 1;
    padding-top: 20px;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    backdrop-filter: blur(2px);
}

.modal-content {
    margin: auto;
    display: grid;
    width: 60%;
    max-width: 700px;
    border: solid 3px rgb(214 105 12);
    border-radius: 10px;
    align-content: center;
    justify-content: center;
}

.close {
    color: #0484f4;
    font-size: 40px;
    font-weight: bolder;
    transition: 0.3s;
    cursor: pointer;
    float: right;
}

.close:hover,
.close:focus {
    color: #18ee05;
    text-decoration: none;
    cursor: pointer;
}
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

</html>